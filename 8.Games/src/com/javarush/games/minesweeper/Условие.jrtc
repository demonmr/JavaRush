taskKey="com.javarush.games.minesweeper.part06"\n\nИгра сапер (6/16)

Теперь давай займемся подсчетом мин в соседних ячейках. Для этого каждой ячейке матрицы добавим параметр
(поле класса), который отвечает за количество "заминированных" соседей. Сначала найдем всех соседей,
а потом посчитаем, сколько из них "заминированы".
Для получения списка соседей у тебя появился метод getNeighbors(), который принимает один параметр типа GameObject (ячейку).
Осталось в отдельном методе посчитать количество "заминированных" соседей для каждой ячейки из gameField
и внесем это значение в соответствующее поле ячейки матрицы.
Хотя визуально твоя работа не видна (ты же запустил программу, чтобы посмотреть что получилось?), она очень важна для будущих шагов.


Требования:
1.	В классе GameObject должно существовать публичное поле countMineNeighbors типа int.
2.	В классе MinesweeperGame должен существовать приватный void метод countMineNeighbors().
3.	Метод countMineNeighbors() должен для каждой ячейки &quot;не мины&quot; из матрицы gameField подсчитать количество соседних ячеек &quot;мин&quot; и установить это значение в поле countMineNeighbors.
4.	В методе countMineNeighbors() должен использоваться метод getNeighbors(GameObject gameObject).
5.	В методе createGame() после создания всех элементов матрицы gameField должен быть вызван метод countMineNeighbors().


Игра сапер (6/16)

Теперь давай займемся подсчетом мин в соседних ячейках. Для этого каждой ячейке матрицы добавим параметр
(поле класса), который отвечает за количество "заминированных" соседей. Сначала найдем всех соседей,
а потом посчитаем, сколько из них "заминированы".
Для получения списка соседей у тебя появился метод getNeighbors(), который принимает один параметр типа GameObject (ячейку).
Осталось в отдельном методе посчитать количество "заминированных" соседей для каждой ячейки из gameField
и внесем это значение в соответствующее поле ячейки матрицы.
Хотя визуально твоя работа не видна (ты же запустил программу, чтобы посмотреть что получилось?), она очень важна для будущих шагов.



Игра сапер (6/16)

Теперь давай займемся подсчетом мин в соседних ячейках. Для этого каждой ячейке матрицы добавим параметр
(поле класса), который отвечает за количество "заминированных" соседей. Сначала найдем всех соседей,
а потом посчитаем, сколько из них "заминированы".
Для получения списка соседей у тебя появился метод getNeighbors(), который принимает один параметр типа GameObject (ячейку).
Осталось в отдельном методе посчитать количество "заминированных" соседей для каждой ячейки из gameField
и внесем это значение в соответствующее поле ячейки матрицы.
Хотя визуально твоя работа не видна (ты же запустил программу, чтобы посмотреть что получилось?), она очень важна для будущих шагов.



Игра сапер (6/16)

Теперь давай займемся подсчетом мин в соседних ячейках. Для этого каждой ячейке матрицы добавим параметр
(поле класса), который отвечает за количество "заминированных" соседей. Сначала найдем всех соседей,
а потом посчитаем, сколько из них "заминированы".
Для получения списка соседей у тебя появился метод getNeighbors(), который принимает один параметр типа GameObject (ячейку).
Осталось в отдельном методе посчитать количество "заминированных" соседей для каждой ячейки из gameField
и внесем это значение в соответствующее поле ячейки матрицы.
Хотя визуально твоя работа не видна (ты же запустил программу, чтобы посмотреть что получилось?), она очень важна для будущих шагов.



Игра сапер (6/16)

Теперь давай займемся подсчетом мин в соседних ячейках. Для этого каждой ячейке матрицы добавим параметр
(поле класса), который отвечает за количество "заминированных" соседей. Сначала найдем всех соседей,
а потом посчитаем, сколько из них "заминированы".
Для получения списка соседей у тебя появился метод getNeighbors(), который принимает один параметр типа GameObject (ячейку).
Осталось в отдельном методе посчитать количество "заминированных" соседей для каждой ячейки из gameField
и внесем это значение в соответствующее поле ячейки матрицы.
Хотя визуально твоя работа не видна (ты же запустил программу, чтобы посмотреть что получилось?), она очень важна для будущих шагов.



Игра сапер (6/16)

Теперь давай займемся подсчетом мин в соседних ячейках. Для этого каждой ячейке матрицы добавим параметр
(поле класса), который отвечает за количество "заминированных" соседей. Сначала найдем всех соседей,
а потом посчитаем, сколько из них "заминированы".
Для получения списка соседей у тебя появился метод getNeighbors(), который принимает один параметр типа GameObject (ячейку).
Осталось в отдельном методе посчитать количество "заминированных" соседей для каждой ячейки из gameField
и внесем это значение в соответствующее поле ячейки матрицы.
Хотя визуально твоя работа не видна (ты же запустил программу, чтобы посмотреть что получилось?), она очень важна для будущих шагов.



